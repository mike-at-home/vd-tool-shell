buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:4.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10" // Use the latest version
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: 'base'
apply plugin: 'de.undercouch.download'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.android.tools:common:30.0.0'
    implementation 'xerces:xercesImpl:2.12.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

/* makes a single fat jar to run */
shadowJar {
    archiveBaseName.set('vd-tool')
    archiveClassifier.set('')
   /* 
   archiveVersion.set('1.0')

    */
    manifest {
        attributes 'Main-Class': 'com.android.ide.common.vectordrawable.VdCommandLineTool'
    }
}



/* copies vd-tool.jar to build/distributions */
task copyJarToDistributions(type: Copy) {
    dependsOn(shadowJar, tasks['jar'])

    def outputDir = layout.buildDirectory
    def fromJar = outputDir.dir("libs").get().file("vd-tool.jar").asFile
    def toJar = outputDir.dir("distributions").get()

    from fromJar
    into toJar
}

/* makes vd-tool.sh as output */
task createShellScript {
    dependsOn copyJarToDistributions

    def distDir = new File(projectDir, 'build/distributions')
    def unixScript = new File(distDir, 'vd-tool.sh')

    onlyIf { !unixScript.exists() }

    doLast {
        distDir.mkdirs()

        unixScript.text = """#!/bin/bash
java -jar vd-tool.jar "\$@"
"""
        unixScript.setExecutable(true)
    }
}


def createDownloadAndInstallTask(String url, List<String> pathsToMerge) {
    def tempDir = layout.buildDirectory
    // Derive the extractDir from the URL by taking the name after the last slash (before .tar.gz)
    def fileName = url.split("/").last().replace(".tar.gz", "")
    def extractDir = tempDir.dir(fileName).get().asFile
    def tarFile = tempDir.file("${fileName}.tar.gz").get().asFile

    // Task name derivation from the fileName
    def downloadTaskName = "download-${fileName}"
    def extractAndCopyTaskName = "extractAndCopy-${fileName}"
    def untarTaskName = "untar-${fileName}"
    def installSourcesTaskName = "installSources-${fileName}"


    def downloadTask = tasks.create(downloadTaskName, Download) {
        onlyIf { !tarFile.exists() }

        src url
        dest tarFile
    }

    def untarTask = tasks.create(untarTaskName, Copy) {
        onlyIf { !extractDir.exists() }

        dependsOn downloadTask

        from tarTree(resources.gzip(tarFile))
        into extractDir
    }

    def extractAndCopyTask = tasks.create(extractAndCopyTaskName) {
        dependsOn { untarTask }

        for(def pathToMerge in pathsToMerge) {
            copy {
                from "${extractDir}/src/${pathToMerge}"
                into "src/${pathToMerge}"
            }
        }
    }

    return extractAndCopyTask
}

afterEvaluate {
    def toolTask = createDownloadAndInstallTask(
            'https://android.googlesource.com/platform/tools/base/+archive/refs/heads/mirror-goog-studio-main/vector-drawable-tool.tar.gz',
            ['main']
    )

    def sdkTask = createDownloadAndInstallTask(
            'https://android.googlesource.com/platform/tools/base/+archive/refs/heads/mirror-goog-studio-main/sdk-common.tar.gz',
            ['main/java/com/android/ide/common/vectordrawable',
             'main/java/com/android/ide/common/util/AssetUtil.java'
            ])
    tasks['compileJava'].dependsOn(toolTask, sdkTask)
//    shadowJar
    tasks['build'].dependsOn(createShellScript)
//    tasks['build'].dependsOn(createShellScript)
}